from math import *
import numpy as np
import matplotlib.pyplot as plt
import csv




# South Korea 3rd model SEAIQR Simulation 

Sy=[31451865]
Sm=[14578212]
So=[5194184]
Ey=[217]
Em=[577]
Eo=[30]
A=[0]
AT=[0]
Iy=[0]
Im=[0]
Io=[0]
My=[18]
Mm=[11]
Mo=[2]
Dy=[0]
Dm=[0]
Do=[0]
R=[0]
R0=[]
bbt=[]


IT=[31]
ITy=[18]
ITm=[11]
ITo=[2]



N = 51225116
beta = 1.4081
beta1 = 0.4531
q = 0.01
eta = 1/5.1
p = 0.844
gamma = 1/14
alpha = 1/17.5
x = 1/4 
x1 = 1/3
dy = 0.0006 # Based on 8/22 number of death
dm = 0.0104
do = 0.1341
theta = 1/13
epsilon = 1.1254




a1=1.2701
a2=0.1948
a3=0.00011
k1=0.7139
k2=0.0752
b1=0.1417
b2=-2.2807



# Differential equations of each compartment

def Sy_prime(t,Sy,A,Iy,Im,Io,My,Mm,Mo,Dy,Dm,Do):
        return -( ((1.4081-b1)*a1)/((1.4081-b1)+(a1+b1-1.4081)*exp(k1*t)) + b1 + a3*a2/(a3+(a2-a3)*exp(-k2*t+b2)) )*Sy*(Iy+Im+Io+q*A)*(1/(N-(My+Mm+Mo+Dy+Dm+Do))) 

def Sm_prime(t,Sm,A,Iy,Im,Io,My,Mm,Mo,Dy,Dm,Do):
        return -( ((1.4081-b1)*a1)/((1.4081-b1)+(a1+b1-1.4081)*exp(k1*t)) + b1 + a3*a2/(a3+(a2-a3)*exp(-k2*t+b2)) )*Sm*(Iy+Im+Io+q*A)*(1/(N-(My+Mm+Mo+Dy+Dm+Do))) 

def So_prime(t,So,A,Iy,Im,Io,My,Mm,Mo,Dy,Dm,Do):
        return -( ((1.4081-b1)*a1)/((1.4081-b1)+(a1+b1-1.4081)*exp(k1*t)) + b1 + a3*a2/(a3+(a2-a3)*exp(-k2*t+b2)) )*(epsilon)*So*(Iy+Im+Io+q*A)*(1/(N-(My+Mm+Mo+Dy+Dm+Do))) 

def Ey_prime(t,Sy,Ey,A,Iy,Im,Io,My,Mm,Mo,Dy,Dm,Do):
        return ( ((1.4081-b1)*a1)/((1.4081-b1)+(a1+b1-1.4081)*exp(k1*t)) + b1 + a3*a2/(a3+(a2-a3)*exp(-k2*t+b2)) )*Sy*(Iy+Im+Io+q*A)*(1/(N-(My+Mm+Mo+Dy+Dm+Do))) - (eta)*Ey

def Em_prime(t,Sm,Em,A,Iy,Im,Io,My,Mm,Mo,Dy,Dm,Do):
        return ( ((1.4081-b1)*a1)/((1.4081-b1)+(a1+b1-1.4081)*exp(k1*t)) + b1 + a3*a2/(a3+(a2-a3)*exp(-k2*t+b2)) )*Sm*(Iy+Im+Io+q*A)*(1/(N-(My+Mm+Mo+Dy+Dm+Do))) - (eta)*Em

def Eo_prime(t,So,Eo,A,Iy,Im,Io,My,Mm,Mo,Dy,Dm,Do):
        return ( ((1.4081-b1)*a1)/((1.4081-b1)+(a1+b1-1.4081)*exp(k1*t)) + b1 + a3*a2/(a3+(a2-a3)*exp(-k2*t+b2)) )*(epsilon)*So*(Iy+Im+Io+q*A)*(1/(N-(My+Mm+Mo+Dy+Dm+Do))) - (eta)*Eo

def A_prime(t,Ey,Em,Eo,A):
        return (1-p)*(eta)*(Ey+Em+Eo) - (gamma)*A

def AT_prime(t,Ey,Em,Eo):
        return (1-p)*(eta)*(Ey+Em+Eo)

def IT_prime(t,Ey,Em,Eo):
        return (eta)*p*(Ey+Em+Eo)

def ITy_prime(t,Ey):
        return (eta)*p*Ey

def ITm_prime(t,Em):
        return (eta)*p*Em

def ITo_prime(t,Eo):
        return (eta)*p*Eo

def Iy_prime(t,Ey,Iy):
        return (eta)*p*Ey - x*Iy

def Iy_prime(t,Ey,Iy):
        return (eta)*p*Ey - x*Iy

def Im_prime(t,Em,Im):
        return (eta)*p*Em - x*Im

def Io_prime(t,Eo,Io):
        return (eta)*p*Eo - x*Io

def My_prime(t,Iy,My):
        return  x*Iy - ( alpha*(1-dy)+dy*theta )*My

def Mm_prime(t,Im,Mm):
        return  x*Im - ( alpha*(1-dm)+dm*theta )*Mm

def Mo_prime(t,Io,Mo):
        return  x*Io - ( alpha*(1-do)+do*theta )*Mo

def MT_prime(t,Iy,Im,Io):
        return x*(Iy+Im+Io)

def Dy_prime(t,My):
        return dy*(theta)*My

def Dm_prime(t,Mm):
        return dm*(theta)*Mm

def Do_prime(t,Mo):
        return do*(theta)*Mo

def R_prime(t,A,My,Mm,Mo):
        return (gamma)*A + (alpha)*( (1-dy)*My + (1-dm)*Mm + (1-do)*Mo )



t=np.linspace(0,186,187)
h=t[1]



# Numerical solution part by using 2-Stage Runge-Kutta method

for i in range(0,186):  
    Sy.append( Sy[i] + h*Sy_prime(t[i]+h/2, Sy[i]+(h/2)*Sy_prime(t[i],Sy[i],A[i],Iy[i],Im[i],Io[i],My[i],Mm[i],Mo[i],Dy[i],Dm[i],Do[i]), A[i]+(h/2)*A_prime(t[i],Ey[i],Em[i],Eo[i],A[i]), Iy[i]+(h/2)*Iy_prime(t[i],Ey[i],Iy[i]), Im[i]+(h/2)*Im_prime(t[i],Em[i],Im[i]), Io[i]+(h/2)*Io_prime(t[i],Eo[i],Io[i]), My[i]+(h/2)*My_prime(t[i],Iy[i],My[i]), Mm[i]+(h/2)*Mm_prime(t[i],Im[i],Mm[i]), Mo[i]+(h/2)*Mo_prime(t[i],Io[i],Mo[i]), Dy[i]+(h/2)*Dy_prime(t[i],My[i]), Dm[i]+(h/2)*Dm_prime(t[i],Mm[i]), Do[i]+(h/2)*Do_prime(t[i],Mo[i]) ) )
    Sm.append( Sm[i] + h*Sm_prime(t[i]+h/2, Sm[i]+(h/2)*Sm_prime(t[i],Sm[i],A[i],Iy[i],Im[i],Io[i],My[i],Mm[i],Mo[i],Dy[i],Dm[i],Do[i]), A[i]+(h/2)*A_prime(t[i],Ey[i],Em[i],Eo[i],A[i]), Iy[i]+(h/2)*Iy_prime(t[i],Ey[i],Iy[i]), Im[i]+(h/2)*Im_prime(t[i],Em[i],Im[i]), Io[i]+(h/2)*Io_prime(t[i],Eo[i],Io[i]), My[i]+(h/2)*My_prime(t[i],Iy[i],My[i]), Mm[i]+(h/2)*Mm_prime(t[i],Im[i],Mm[i]), Mo[i]+(h/2)*Mo_prime(t[i],Io[i],Mo[i]), Dy[i]+(h/2)*Dy_prime(t[i],My[i]), Dm[i]+(h/2)*Dm_prime(t[i],Mm[i]), Do[i]+(h/2)*Do_prime(t[i],Mo[i]) ) )
    So.append( So[i] + h*So_prime(t[i]+h/2, So[i]+(h/2)*So_prime(t[i],So[i],A[i],Iy[i],Im[i],Io[i],My[i],Mm[i],Mo[i],Dy[i],Dm[i],Do[i]), A[i]+(h/2)*A_prime(t[i],Ey[i],Em[i],Eo[i],A[i]), Iy[i]+(h/2)*Iy_prime(t[i],Ey[i],Iy[i]), Im[i]+(h/2)*Im_prime(t[i],Em[i],Im[i]), Io[i]+(h/2)*Io_prime(t[i],Eo[i],Io[i]), My[i]+(h/2)*My_prime(t[i],Iy[i],My[i]), Mm[i]+(h/2)*Mm_prime(t[i],Im[i],Mm[i]), Mo[i]+(h/2)*Mo_prime(t[i],Io[i],Mo[i]), Dy[i]+(h/2)*Dy_prime(t[i],My[i]), Dm[i]+(h/2)*Dm_prime(t[i],Mm[i]), Do[i]+(h/2)*Do_prime(t[i],Mo[i]) ) )
    Ey.append( Ey[i] + h*Ey_prime(t[i]+h/2, Sy[i]+(h/2)*Sy_prime(t[i],Sy[i],A[i],Iy[i],Im[i],Io[i],My[i],Mm[i],Mo[i],Dy[i],Dm[i],Do[i]), Ey[i]+(h/2)*Ey_prime(t[i],Sy[i],Ey[i],A[i],Iy[i],Im[i],Io[i],My[i],Mm[i],Mo[i],Dy[i],Dm[i],Do[i]), A[i]+(h/2)*A_prime(t[i],Ey[i],Em[i],Eo[i],A[i]), Iy[i]+(h/2)*Iy_prime(t[i],Ey[i],Iy[i]), Im[i]+(h/2)*Im_prime(t[i],Em[i],Im[i]), Io[i]+(h/2)*Io_prime(t[i],Eo[i],Io[i]), My[i]+(h/2)*My_prime(t[i],Iy[i],My[i]), Mm[i]+(h/2)*Mm_prime(t[i],Im[i],Mm[i]), Mo[i]+(h/2)*Mo_prime(t[i],Io[i],Mo[i]), Dy[i]+(h/2)*Dy_prime(t[i],My[i]), Dm[i]+(h/2)*Dm_prime(t[i],Mm[i]), Do[i]+(h/2)*Do_prime(t[i],Mo[i]) ) )
    Em.append( Em[i] + h*Em_prime(t[i]+h/2, Sm[i]+(h/2)*Sm_prime(t[i],Sm[i],A[i],Iy[i],Im[i],Io[i],My[i],Mm[i],Mo[i],Dy[i],Dm[i],Do[i]), Em[i]+(h/2)*Em_prime(t[i],Sm[i],Em[i],A[i],Iy[i],Im[i],Io[i],My[i],Mm[i],Mo[i],Dy[i],Dm[i],Do[i]), A[i]+(h/2)*A_prime(t[i],Ey[i],Em[i],Eo[i],A[i]), Iy[i]+(h/2)*Iy_prime(t[i],Ey[i],Iy[i]), Im[i]+(h/2)*Im_prime(t[i],Em[i],Im[i]), Io[i]+(h/2)*Io_prime(t[i],Eo[i],Io[i]), My[i]+(h/2)*My_prime(t[i],Iy[i],My[i]), Mm[i]+(h/2)*Mm_prime(t[i],Im[i],Mm[i]), Mo[i]+(h/2)*Mo_prime(t[i],Io[i],Mo[i]), Dy[i]+(h/2)*Dy_prime(t[i],My[i]), Dm[i]+(h/2)*Dm_prime(t[i],Mm[i]), Do[i]+(h/2)*Do_prime(t[i],Mo[i]) ) )
    Eo.append( Eo[i] + h*Eo_prime(t[i]+h/2, So[i]+(h/2)*So_prime(t[i],So[i],A[i],Iy[i],Im[i],Io[i],My[i],Mm[i],Mo[i],Dy[i],Dm[i],Do[i]), Eo[i]+(h/2)*Eo_prime(t[i],So[i],Eo[i],A[i],Iy[i],Im[i],Io[i],My[i],Mm[i],Mo[i],Dy[i],Dm[i],Do[i]), A[i]+(h/2)*A_prime(t[i],Ey[i],Em[i],Eo[i],A[i]), Iy[i]+(h/2)*Iy_prime(t[i],Ey[i],Iy[i]), Im[i]+(h/2)*Im_prime(t[i],Em[i],Im[i]), Io[i]+(h/2)*Io_prime(t[i],Eo[i],Io[i]), My[i]+(h/2)*My_prime(t[i],Iy[i],My[i]), Mm[i]+(h/2)*Mm_prime(t[i],Im[i],Mm[i]), Mo[i]+(h/2)*Mo_prime(t[i],Io[i],Mo[i]), Dy[i]+(h/2)*Dy_prime(t[i],My[i]), Dm[i]+(h/2)*Dm_prime(t[i],Mm[i]), Do[i]+(h/2)*Do_prime(t[i],Mo[i]) ) )
    A.append( A[i] + h*A_prime(t[i]+h/2, Ey[i]+(h/2)*Ey_prime(t[i],Sy[i],Ey[i],A[i],Iy[i],Im[i],Io[i],My[i],Mm[i],Mo[i],Dy[i],Dm[i],Do[i]), Em[i]+(h/2)*Em_prime(t[i],Sm[i],Em[i],A[i],Iy[i],Im[i],Io[i],My[i],Mm[i],Mo[i],Dy[i],Dm[i],Do[i]), Eo[i]+(h/2)*Eo_prime(t[i],So[i],Eo[i],A[i],Iy[i],Im[i],Io[i],My[i],Mm[i],Mo[i],Dy[i],Dm[i],Do[i]), A[i]+(h/2)*A_prime(t[i],Ey[i],Em[i],Eo[i],A[i]) ) )
    AT.append( AT[i] + h*AT_prime(t[i]+h/2, Ey[i]+(h/2)*Ey_prime(t[i],Sy[i],Ey[i],A[i],Iy[i],Im[i],Io[i],My[i],Mm[i],Mo[i],Dy[i],Dm[i],Do[i]), Em[i]+(h/2)*Em_prime(t[i],Sm[i],Em[i],A[i],Iy[i],Im[i],Io[i],My[i],Mm[i],Mo[i],Dy[i],Dm[i],Do[i]), Eo[i]+(h/2)*Eo_prime(t[i],So[i],Eo[i],A[i],Iy[i],Im[i],Io[i],My[i],Mm[i],Mo[i],Dy[i],Dm[i],Do[i]) ) )
    IT.append( IT[i] + h*IT_prime(t[i]+h/2, Ey[i]+(h/2)*Ey_prime(t[i],Sy[i],Ey[i],A[i],Iy[i],Im[i],Io[i],My[i],Mm[i],Mo[i],Dy[i],Dm[i],Do[i]), Em[i]+(h/2)*Em_prime(t[i],Sm[i],Em[i],A[i],Iy[i],Im[i],Io[i],My[i],Mm[i],Mo[i],Dy[i],Dm[i],Do[i]), Eo[i]+(h/2)*Eo_prime(t[i],So[i],Eo[i],A[i],Iy[i],Im[i],Io[i],My[i],Mm[i],Mo[i],Dy[i],Dm[i],Do[i]) ) )
    ITy.append( ITy[i] + h*ITy_prime(t[i]+h/2, Ey[i]+(h/2)*Ey_prime(t[i],Sy[i],Ey[i],A[i],Iy[i],Im[i],Io[i],My[i],Mm[i],Mo[i],Dy[i],Dm[i],Do[i]) ) )
    ITm.append( ITm[i] + h*ITm_prime(t[i]+h/2, Em[i]+(h/2)*Em_prime(t[i],Sm[i],Em[i],A[i],Iy[i],Im[i],Io[i],My[i],Mm[i],Mo[i],Dy[i],Dm[i],Do[i]) ) )
    ITo.append( ITo[i] + h*ITo_prime(t[i]+h/2, Eo[i]+(h/2)*Eo_prime(t[i],So[i],Eo[i],A[i],Iy[i],Im[i],Io[i],My[i],Mm[i],Mo[i],Dy[i],Dm[i],Do[i]) ) )
    Iy.append( Iy[i] + h*Iy_prime(t[i]+h/2, Ey[i]+(h/2)*Ey_prime(t[i],Sy[i],Ey[i],A[i],Iy[i],Im[i],Io[i],My[i],Mm[i],Mo[i],Dy[i],Dm[i],Do[i]), Iy[i]+(h/2)*Iy_prime(t[i],Ey[i],Iy[i]) ) )
    Im.append( Im[i] + h*Im_prime(t[i]+h/2, Em[i]+(h/2)*Em_prime(t[i],Sm[i],Em[i],A[i],Iy[i],Im[i],Io[i],My[i],Mm[i],Mo[i],Dy[i],Dm[i],Do[i]), Im[i]+(h/2)*Im_prime(t[i],Em[i],Im[i]) ) )
    Io.append( Io[i] + h*Io_prime(t[i]+h/2, Eo[i]+(h/2)*Eo_prime(t[i],So[i],Eo[i],A[i],Iy[i],Im[i],Io[i],My[i],Mm[i],Mo[i],Dy[i],Dm[i],Do[i]), Io[i]+(h/2)*Io_prime(t[i],Eo[i],Io[i]) ) )
    My.append( My[i] + h*My_prime(t[i]+h/2, Iy[i]+(h/2)*Iy_prime(t[i],Ey[i],Iy[i]), My[i]+(h/2)*My_prime(t[i],Iy[i],My[i]) ) )
    Mm.append( Mm[i] + h*Mm_prime(t[i]+h/2, Im[i]+(h/2)*Im_prime(t[i],Em[i],Im[i]), Mm[i]+(h/2)*Mm_prime(t[i],Im[i],Mm[i]) ) )
    Mo.append( Mo[i] + h*Mo_prime(t[i]+h/2, Io[i]+(h/2)*Io_prime(t[i],Eo[i],Io[i]), Mo[i]+(h/2)*Mo_prime(t[i],Io[i],Mo[i]) ) )
    Dy.append( Dy[i] + h*Dy_prime(t[i]+h/2, My[i]+(h/2)*My_prime(t[i],Iy[i],My[i]) ) )
    Dm.append( Dm[i] + h*Dm_prime(t[i]+h/2, Mm[i]+(h/2)*Mm_prime(t[i],Im[i],Mm[i]) ) )
    Do.append( Do[i] + h*Do_prime(t[i]+h/2, Mo[i]+(h/2)*Mo_prime(t[i],Io[i],Mo[i]) ) )   
    R.append( R[i] + h*R_prime(t[i]+h/2, A[i]+(h/2)*A_prime(t[i],Ey[i],Em[i],Eo[i],A[i]), My[i]+(h/2)*My_prime(t[i],Iy[i],My[i]), Mm[i]+(h/2)*Mm_prime(t[i],Im[i],Mm[i]), Mo[i]+(h/2)*Mo_prime(t[i],Io[i],Mo[i]) ) )



for i in range(0,187):
        R0.append( (Sy[i]+Sm[i]+(epsilon)*So[i])/((N-(My[i]+Mm[i]+Mo[i]+Dy[i]+Dm[i]+Do[i]))) * ( ((1.4081-b1)*a1)/((1.4081-b1)+(a1+b1-1.4081)*exp(k1*t[i])) + b1 + a3*a2/(a3+(a2-a3)*exp(-k2*t[i]+b2)) ) * (0.01*0.156*14 + 0.844*(1/x)) )

# Cumulative cases data

data=[31,46,82,178,346,556,763,895,1147,1596,2023,2932,3527,4213,4813,5328,5766,6284,6767,7134,7382,7513,7755,7869,7979,8086,8162,8236,8320,8413,8565,8652,8799,8897,
          8961,9037,9137,9241,9332,9478,9583,9661,9786,9887,9976,10062,10156,10237,10284,10330,10384,10423,10450,10480,10512,10537,10564,10591,10612,10635,10653,10661,10674,10683,10694,10702,10708,10718,10728,10738,10752,10761,10765,10774,
          10780,10793,10801,10804,10806,10810,10822,10840,10874,10909,10936,10962,10991,11018,11037,11050,11065,11078,11110,11122,11142,11165,11190,11206,11225,11265,11344,11402,11441,11468,11503,11541,11590,11629,11668,11719,11776,11814,11852,
          11902,11947,12003,12051,12085,12121,12155,12198,12257,12306,12373,12421,12438,12484,12535,12563,12602,12653,12715,12757,12800,12851,12905,12968,13031,13092,13140,13184,13247,13297,13342,13377,13421,13483,13545,13584,13645,13705,13744,
          13778,13804,13849,13912,13971,14010,14123,14181,14206,14234,14282,14300,14336,14367,14397,14420,14454,14487,14530,14550,14593,14629,14657,14691,14745,14801,14904,15070,15349,15546,15792,16089,16377,16701,17033]


data_y=[18,27,44,84,155,270,386,481,630,931,1198,1770,2166,2576,2947,3263,3528,3796,4075,4286,4421,4492,4604,4662,4712,4758,4794,4826,4872,4911,4960,5000,5039,5087,5125,5166,5242
,5309,5352,5433,5506,5554,5607,5667,5724,5785,5837,5901,5933,5963,5995,6027,6042,6058,6080,6096,6114,6135,6149,6167,6180,6186,6196,6200,6209,6214,6217,6225,6235,6245,6255,6263,6267,6275
,6280,6288,6294,6296,6297,6301,6312,6329,6358,6392,6415,6437,6466,6488,6503,6514,6527,6533,6562,6574,6591,6601,6618,6627,6639,6661,6722,6760,6781,6801,6816,6828,6847,6859,6872,6895,6919
,6934,6943,6962,6987,7010,7024,7041,7064,7078,7105,7127,7149,7185,7206,7215,7240,7272,7287,7313,7346,7385,7409,7440,7461,7481,7519,7560,7594,7623,7651,7692,7727,7757,7774,7804,7853,7902
,7925,7970,8011,8042,8063,8085,8110,8143,8177,8193,8280,8312,8329,8348,8382,8394,8421,8438,8460,8473,8499,8520,8543,8556,8573,8593,8603,8618,8653,8689,8750,8840,8968,9058,9152,9283,9428,9577,9750]


data_m=[11,16,32,82,169,250,327,364,451,573,704,977,1140,1364,1549,1697,1826,1980,2117,2227,2307,2345,2432,2467,2508,2550,2580,2609,2635,2674,2722,2755,2790,2823,2841,2862,2878,2900,2922
,2981,3008,3030,3086,3110,3136,3153,3180,3193,3200,3212,3227,3231,3240,3253,3260,3267,3273,3276,3280,3284,3287,3288,3291,3294,3295,3296,3298,3300,3300,3300,3303,3304,3304,3304,3305,3307,3309
,3310,3311,3311,3312,3313,3317,3318,3321,3323,3323,3326,3330,3331,3333,3339,3341,3341,3343,3355,3362,3369,3374,3388,3406,3423,3437,3444,3462,3482,3506,3524,3541,3558,3581,3598,3617,3640,3654
,3684,3701,3716,3726,3740,3750,3772,3795,3820,3838,3845,3861,3876,3887,3897,3909,3928,3945,3954,3976,4002,4020,4037,4058,4072,4086,4101,4114,4125,4135,4147,4156,4165,4181,4193,4207,4214,4224
,4227,4235,4255,4276,4293,4315,4338,4341,4349,4358,4364,4371,4384,4390,4399,4405,4416,4433,4440,4463,4477,4494,4510,4524,4540,4574,4636,4750,4836,4964,5094,5196,5331,5453]


data_o=[2,3,6,12,22,36,50,50,66,92,121,185,221,273,317,368,412,508,575,621,654,676,719,740,759,778,788,801,813,828,883,897,970,987,995,1009,1017,1032,1058,1064,1069,1077,1093,1110,1116,1124
,1139,1143,1151,1155,1162,1165,1168,1169,1172,1174,1177,1180,1183,1184,1186,1187,1187,1189,1190,1192,1193,1193,1193,1193,1194,1194,1194,1195,1195,1198,1198,1198,1198,1198,1198,1198,1199,1199
,1200,1202,1202,1204,1204,1205,1205,1206,1207,1207,1208,1209,1210,1210,1212,1216,1216,1219,1223,1223,1225,1231,1237,1246,1255,1266,1276,1282,1292,1300,1306,1309,1326,1328,1331,1337,1343,1358,1362
,1368,1377,1378,1383,1387,1389,1392,1398,1402,1403,1406,1414,1422,1429,1434,1440,1445,1447,1454,1456,1460,1468,1470,1474,1478,1478,1482,1487,1488,1491,1492,1504,1514,1518,1524,1528,1531,1536
,1537,1542,1542,1544,1545,1547,1548,1550,1551,1554,1554,1557,1559,1560,1563,1568,1572,1580,1594,1631,1652,1676,1712,1753,1793,1830]


 
Death_y=[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,
    4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
    5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
    5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
    5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6]

Death_m=[12,13,16,16,16,17,18,20,20,20,20,20,20,22,22,24,24,24,24,25,28,30,30,
         31,31,31,31,32,33,34,36,37,38,39,40,40,41,43,45,46,47,47,47,47,48,49,
         49,49,49,50,50,50,50,50,50,50,50,50,50,50,51,51,51,52,52,52,52,52,52,
         52,53,53,53,53,53,53,53,53,53,54,54,54,54,54,54,54,54,54,54,54,54,54,
         54,54,54,54,54,54,54,55,55,55,55,55,55,55,55,55,55,55,56,56,56,56,56,
         56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,57,57,57,
         57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,
         57,57,57,57,57,57,57,57,57,57,57]

Death_o=[18,20,24,26,32,32,34,38,44,45,50,53,53,57,60,65,68,76,78,84,90,94,99,
         106,111,119,125,128,130,132,135,137,142,144,150,156,160,163,164,165,167,
         171,174,178,179,180,180,182,183,184,185,185,185,187,188,189,191,192,193,195,
         195,196,198,199,199,199,199,199,199,201,202,202,202,204,204,205,205,205,206,
         206,207,207,208,208,210,210,210,210,211,212,213,214,214,214,214,214,214,215,
         217,217,217,217,217,217,218,219,220,220,220,220,220,220,220,221,221,221,
         221,221,221,221,221,221,222,222,223,224,224,226,227,227,228,228,228,228,
         230,232,232,233,234,234,235,235,236,236,236,237,238,238,238,239,239,239,
         239,239,240,240,241,242,242,242,242,242,242,242,242,242,242,243,243,244,
         246,246]


# RK4 method IT (Borrowed from other code program)
IT_RK4 = [31, 159.33543427257177, 289.15959582148537, 439.5060895116478, 625.0607642631887, 858.9163114377163, 1152.706480027377, 1513.9862808664318, 1941.1827551586161, 2419.497877861587, 2923.4780229293547, 3426.4145041812862, 3908.8152113782935, 4360.591690832024, 4778.768869301518, 5164.330889631199, 5519.928403806725, 5848.613731378061, 6153.27309188507, 6436.434131925484, 6700.2453671842, 6946.520745159774, 7176.800018703388, 7392.405158819432, 7594.486720864241, 7784.059761656435, 7962.030875094194, 8129.21830482897, 8286.366895295063, 8434.159285572372, 8573.224401680598, 8704.144015098911, 8827.45791545468, 8943.668084189303, 9053.242140726936, 9156.616251394911, 9254.197634552735, 9346.366755911647, 9433.479280663416, 9515.867830084524, 9593.843577144766, 9667.69770652196, 9737.702758058604, 9804.113868231047, 9867.169921045434, 9927.094617520841, 9984.097471289764, 10038.374736648146, 10090.110274490089, 10139.476360876231, 10186.634442447341, 10231.73584246355, 10274.922420895184, 10316.327191693086, 10356.074900110463, 10394.282562724735, 10431.059972609686, 10466.510171930391, 10500.729894072432, 10533.809977270213, 10565.835751564735, 10596.88740079761, 10627.040301234181, 10656.365338303376, 10684.929202844734, 10712.794668163066, 10740.020849107903, 10766.663444317819, 10792.774962698139, 10818.404935134258, 10843.6001123812, 10868.40465001268, 10892.860281259595, 10917.006478517967, 10940.880604259743, 10964.518052036026, 10987.952378221224, 11011.21542510772, 11034.3374359241, 11057.347162315187, 11080.271964789346, 11103.13790660724, 11125.969841556634, 11148.791496029697, 11171.625545792549, 11194.493687811482, 11217.416707476237, 11240.414541538074, 11263.506337058843, 11286.710506647096, 11310.04478023817, 11333.526253657348, 11357.171434188376, 11380.996283353945, 11405.016257100078, 11429.246343562689, 11453.701098581845, 11478.394679117444, 11503.340874709003, 11528.553137112096, 11554.044608234497, 11579.828146486381, 11605.916351650807, 11632.321588373241, 11659.056008361977, 11686.131571384878, 11713.560065141986, 11741.353124088062, 11769.522247274077, 11798.078815272005, 11827.034106242934, 11856.399311204525, 11886.185548550156, 11916.403877868628, 11947.06531311016, 11978.180835141451, 12009.761403729824, 12041.817968993986, 12074.361482356504, 12107.402907030972, 12140.953228074779, 12175.023462036472, 12209.624666224978, 12244.767947626278, 12280.464471491601, 12316.725469619765, 12353.562248354967, 12390.986196320086, 12429.008791904358, 12467.64161052325, 12506.896331667285, 12546.784745755676, 12587.318760809672, 12628.51040895975, 12670.371852799959, 12712.915391602013, 12756.153467401042, 12800.09867096427, 12844.763747653284, 12890.161603189998, 12936.305309335883, 12983.208109493555, 13030.88342423933, 13079.344856794927, 13128.606198446108, 13178.681433915623, 13229.58474669752, 13281.33052435951, 13333.933363819766, 13387.40807660425, 13441.769694090386, 13497.033472742633, 13553.214899345254, 13610.3296962374, 13668.393826555353, 13727.42349948661, 13787.435175540308, 13848.4455718383, 13910.471667431033, 13973.53070864223, 14037.640214446248, 14102.81798188183, 14169.082091505867, 14236.450912890665, 14304.943110168098, 14374.577647623946, 14445.373795345608, 14517.351134926317, 14590.529565228888, 14664.929308211964, 14740.570914821661, 14817.475270951452, 14895.663603473087, 14975.15748634125, 15055.97884677468, 15138.149971516385, 15221.693513175545, 15306.632496653714, 15392.99032565783, 15480.790789302586, 15570.058068804634, 15660.816744271124, 15753.091801585022, 15846.908639389661, 15942.29307617497, 16039.271357467796, 16137.870163128762]

plt.subplot(1,3,1)
plt.plot(t,Iy,t,Im,t,Io,marker="*")
plt.xlabel("Days (t, t=0 is Feb 18)")
plt.legend(["$I_{y}$(0~49)","$I_{m}$(50~69)","$I_{o}$(70~)"])
plt.title("Number of Infectious Compartments")
plt.grid(True)


plt.subplot(1,3,2)
plt.scatter(t,data,s=5,color="red")
plt.plot(t,IT,color="blue")
plt.plot(t,IT_RK4,color="green")
plt.xlabel("Days (t, t=0 is Feb 18)")
plt.title("Total Cumulative Cases")
plt.legend(["Simulation(RK2)","Simulation(RK4)","Observed Data"])
plt.grid(True)

plt.subplot(1,3,3)
plt.plot(t,R0,color="purple")
plt.xlabel("Days (t, t=0 is Feb 18)")
plt.ylabel("$R_{t}$")
plt.title("Time Dependent Reproduction Number")
plt.grid(True)

plt.show()



####################################

plt.subplot(1,3,1)
plt.scatter(t[15:],Death_y, s=2, color="blue")
plt.scatter(t[15:],Death_m, s=2, color="orange")
plt.scatter(t[15:],Death_o, s=2, color="green")
plt.plot(t,Dy,t,Dm,t,Do)
plt.xlabel("Days (t, t=0 is Feb 18)")
plt.ylabel("Cumulative Death Cases")
plt.legend(["$D_{y}$(0~49)","$D_{m}$(50~69)","$D_{o}$(70~)","Observed Death(Y)","Observed Death(M)","Observed Death(O)"])
plt.grid(True)


#####################################

plt.subplot(1,3,2)
plt.plot(t,A)
plt.xlabel("Days (t, t=0 is Feb 18)")
plt.title("Asymptomatic Compartments")
plt.legend(["Asymptomatic Simulation"])
plt.grid(True)

plt.subplot(1,3,3)
plt.plot(t,AT)
plt.xlabel("Days (t, t=0 is Feb 18)")
plt.title("Cumulative Asymptomatic cases")
plt.legend(["Cumulative Asymptomatic"])
plt.grid(True)

plt.show()



#####################################

plt.scatter(t,data_y, s=2, color="blue")
plt.scatter(t,data_m, s=2, color="orange")
plt.scatter(t,data_o, s=2, color="green")
plt.plot(t,ITy,t,ITm,t,ITo)
plt.xlabel("Days (t, t=0 is Feb 18)")
plt.title("Cumulative Cases by age groups")
plt.legend(["Culumative Cases Simulation (Young)","Culumative Cases Simulation (Middle)","Culumative Cases Simulation (Old)","Observed Culumative Cases (Young)","Observed Culumative Cases (Middle)","Observed Culumative Cases (Old)"])
plt.grid(True)
plt.show()
