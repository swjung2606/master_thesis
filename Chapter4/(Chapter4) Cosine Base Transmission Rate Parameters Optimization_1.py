from math import *
import os
import sys
import glob
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from scipy.integrate import odeint
import plotly.graph_objects as go
import plotly.io as pio
import requests
from lmfit import minimize, Parameters, Parameter, report_fit
from sympy import *


def f(xs,t,ps):
    try:
        
        c1 = ps["c1"].value
        c2 = ps["c2"].value
        l1 = ps["l1"].value



    except:
        b1,b2,l1 = ps

    Sy,Sm,So,Ey,Em,Eo,A,IT,ITy,ITm,ITo,Iy,Im,Io,My,Mm,Mo,Dy,Dm,Do = xs
    
    return [-( 0.5*(c1-c2)*cos( (t-187+(l1/pi)*acos((0.673-c1-c2)/(c1-c2)))*(pi/l1) ) + 0.5*(c1+c2) )*Sy*(Iy+Im+Io+0.01*A)*(1/(N-(My+Mm+Mo+Dy+Dm+Do))) ,
            -( 0.5*(c1-c2)*cos( (t-187+(l1/pi)*acos((0.673-c1-c2)/(c1-c2)))*(pi/l1) ) + 0.5*(c1+c2) )*Sm*(Iy+Im+Io+0.01*A)*(1/(N-(My+Mm+Mo+Dy+Dm+Do))) ,
            -( 0.5*(c1-c2)*cos( (t-187+(l1/pi)*acos((0.673-c1-c2)/(c1-c2)))*(pi/l1) ) + 0.5*(c1+c2) )*(epsilon)*So*(Iy+Im+Io+0.01*A)*(1/(N-(My+Mm+Mo+Dy+Dm+Do))) ,
            ( 0.5*(c1-c2)*cos( (t-187+(l1/pi)*acos((0.673-c1-c2)/(c1-c2)))*(pi/l1) ) + 0.5*(c1+c2) )*Sy*(Iy+Im+Io+0.01*A)*(1/(N-(My+Mm+Mo+Dy+Dm+Do))) - (eta)*Ey ,
            ( 0.5*(c1-c2)*cos( (t-187+(l1/pi)*acos((0.673-c1-c2)/(c1-c2)))*(pi/l1) ) + 0.5*(c1+c2) )*Sm*(Iy+Im+Io+0.01*A)*(1/(N-(My+Mm+Mo+Dy+Dm+Do))) - (eta)*Em ,
            ( 0.5*(c1-c2)*cos( (t-187+(l1/pi)*acos((0.673-c1-c2)/(c1-c2)))*(pi/l1) ) + 0.5*(c1+c2) )*(epsilon)*So*(Iy+Im+Io+0.01*A)*(1/(N-(My+Mm+Mo+Dy+Dm+Do))) - (eta)*Eo ,
            (1-p)*(eta)*(Ey+Em+Eo) - (gamma)*A , (eta)*p*(Ey+Em+Eo) , (eta)*p*Ey , (eta)*p*Em , (eta)*p*Eo , (eta)*p*Ey - x*Iy ,
            (eta)*p*Em - x*Im , (eta)*p*Eo - x*Io , x*Iy - ( alpha*(1-dy)+dy*theta )*My ,
            x*Im - ( alpha*(1-dm)+dm*theta )*Mm , x*Io - ( alpha*(1-do)+do*theta )*Mo , dy*(theta)*My , dm*(theta)*Mm , do*(theta)*Mo]


def g(t,ini0,ps):
    xx = odeint(f, ini0, t, args=(ps,))
    return xx


def residual(ps,ts,data,data_y,data_m,data_o):
    ini0 = 31440466,14572928,5192065,367,170,68, 210, 16084,9512,4814,1758,228,106,42,774,358,139,7,61,272
    model = g(ts,ini0,ps)
    return (model[:,7] - data).ravel() , (model[:,8] - data_y).ravel() , (model[:,9] - data_m).ravel() , (model[:,10] - data_o).ravel()


days=318
t=np.arange(187,days,1)
ini0 = [31440466,14572928,5192065,367,170,68, 210, 16084,9512,4814,1758,228,106,42,774,358,139,7,61,272]


N = 51225116
q = 0.01
eta = 1/5.1
p = 0.844
gamma = 1/14
alpha = 1/17.5
x = 1/4
dy = 0.0006
dm = 0.0104
do = 0.1341
theta = 1/13


c1=0.3867
c2=0.295
l1=50
epsilon = 1.1254

    

data=[17430,17696,17976,18296,18737,19108,19431,19730,19978,20213,20480,20675,20873,21041,21208,21327,21463,21619,21774,21950,22086,22207,22316,22422,22535,22688,22814,22924,23006
,23076,23137,23247,23372,23486,23547,23642,23692,23730,23843,23920,23983,24058,24122,24195,24270,24384,24453,24507,24579,24637,24735,24837,24921,25031,25078,25149,25238,25322,25377
,25467,25586,25740,25810,25866,25979,26065,26164,26278,26384,26498,26617,26707,26779,26897,27022,27169,27258,27401,27527,27627,27773,27916,28107,28312,28520,28743,28973,29286,29629
,29992,30378,30708,30979,31328,31710,32293,32862,33366,33816,34254,34705,35216,35756,36385,36968,37599,38214,38808,39494,40176,40865,41815,42845,43563,44443,45521,46599,47661,48714,
49811,50737,51606,52698,53683,54924,56056,57026,57834,58880,59930,60897]



    
data_y=[9937,10063,10201,10353,10561,10728,10876,11018,11125,11229,11343,11429,11513,11574,11644,11698,11757,11810,11868,11937,11992,12048,12092,12142,12186,12255,12316,12344,12380,12419,12448,12489
,12540,12589,12615,12662,12683,12709,12767,12807,12838,12870,12900,12937,12986,13020,13053,13086,13114,13151,13215,13284,13347,13393,13421,13450,13494,13542,13575,13621,13671,13732,13764,13800
,13873,13915,13973,14031,14091,14151,14233,14283,14325,14385,14458,14548,14600,14664,14732,14790,14851,14941,15028,15151,15252,15363,15485,15661,15877,16096,16360,16573,16748,16962,17192,17571
,17902,18199,18481,18723,18996,19354,19691,20033,20352,20639,20917,21202,21531,21905,22251,22742,23221,23598,24029,24542,25055,25550,26050,26600,27029,27449,27927,28429,29067,29648
,30146,30542,31093,31580,32055]


data_m=[5622,5722,5825
,5942,6115,6251,6372,6500,6604,6695,6794,6864,6941,7021,7095,7138,7198,7273,7347,7421,7484,7533,7583,7626,7673,7736,7784,7845,7874,7896,7922,7964,8020,8061,8087,8126,8148,8157,8201,8227,8251
,8278,8298,8324,8344,8403,8426,8441,8474,8486,8510,8535,8552,8574,8589,8625,8661,8681,8699,8728,8778,8830,8858,8873,8906,8942,8971,9013,9049,9083,9111,9139,9165,9208,9252,9295,9317,9363,9397
,9425,9476,9516,9585,9653,9742,9835,9917,10013,10112,10217,10310,10398,10468,10571,10689,10856,11041,11202,11331,11477,11614,11716,11886,12098,12281,12515,12753,12952,13203,13428,13653,13975
,14350,14596,14880,15286,15692,16103,16497,16918,17274,17586,18021,18375,18828,19208,19578,19879,20259,20661,21021]


data_o=[1871,1911,1950,2001,2061,2129,2183,2212,2249,2289,2343,2382
,2419,2446,2469,2491,2508,2536,2559,2592,2610,2626,2641,2654,2676,2697,2714,2735,2752,2761,2767,2794,2812,2836,2845,2854,2861,2864,2875,2886,2894,2910,2924,2934,2940,2961,2974,2980,2991,3000
,3010,3018,3022,3064,3068,3074,3083,3099,3103,3118,3137,3178,3188,3193,3200,3208,3220,3234,3244,3264,3273,3285,3289,3304,3312,3326,3341,3374,3398,3412,3446,3459,3494,3508,3526,3545,3571,3612
,3640,3679,3708,3737,3763,3795,3829,3866,3919,3965,4004,4054,4095,4146,4179,4254,4335,4445,4544,4654,4760,4843,4961,5098,5274,5369,5534,5693,5852,6008,6167,6293,6434,6571,6750,6879
,7029,7200,7302,7413,7528,7689,7821]



Death_y=[0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,
    4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
    5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
    5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,
    5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6]

Death_m=[0,0,0,0,1,1,3,3,4,4,6,8,8,9,10,12,13,16,16,16,17,18,20,20,20,20,20,20,22,22,24,24,24,24,25,28,30,30,
         31,31,31,31,32,33,34,36,37,38,39,40,40,41,43,45,46,47,47,47,47,48,49,
         49,49,49,50,50,50,50,50,50,50,50,50,50,50,51,51,51,52,52,52,52,52,52,
         52,53,53,53,53,53,53,53,53,53,54,54,54,54,54,54,54,54,54,54,54,54,54,
         54,54,54,54,54,54,54,55,55,55,55,55,55,55,55,55,55,55,56,56,56,56,56,
         56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,57,57,57,
         57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,
         57,57,57,57,57,57,57,57,57,57,57]


Death_o=[0,0,2,3,4,4,5,5,7,9,11,11,13,15,17,18,20,24,26,32,32,34,38,44,45,50,53,53,57,60,65,68,76,78,84,90,94,99,
         106,111,119,125,128,130,132,135,137,142,144,150,156,160,163,164,165,167,
         171,174,178,179,180,180,182,183,184,185,185,185,187,188,189,191,192,193,195,
         195,196,198,199,199,199,199,199,199,201,202,202,202,204,204,205,205,205,206,
         206,207,207,208,208,210,210,210,210,211,212,213,214,214,214,214,214,214,215,
         217,217,217,217,217,217,218,219,220,220,220,220,220,220,220,221,221,221,
         221,221,221,221,221,221,222,222,223,224,224,226,227,227,228,228,228,228,
         230,232,232,233,234,234,235,235,236,236,236,237,238,238,238,239,239,239,
         239,239,240,240,241,242,242,242,242,242,242,242,242,242,242,243,243,244,
         246,246]


params = Parameters()

params.add('c1', value=c1, min=0.3428, max=0.6)
params.add('c2', value=c2, min=0.1480, max=0.3428)
params.add('l1', value=l1, min=40, max=60)




result = minimize(residual, params, args=(t, data,data_y,data_m,data_o), method='leastsq')
result.params
report_fit(result)
